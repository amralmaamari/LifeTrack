
                GO
              CREATE PROCEDURE SP_AddNewsysdiagrams
(
    @diagram_id int OUTPUT,
    @name nvarchar(100),
    @principal_id int,
    @version int,
    @definition varbinary
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        INSERT INTO sysdiagrams (
            name,
            principal_id,
            version,
            definition
        ) VALUES (
            @name,
            @principal_id,
            @version,
            @definition
        );
        SELECT @diagram_id = SCOPE_IDENTITY();
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
        SET @diagram_id = NULL;
    END CATCH;
END;


                GO
              CREATE PROCEDURE SP_Deletesysdiagrams
(
    @diagram_id int
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        DELETE FROM sysdiagrams WHERE diagram_id = @diagram_id;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH;
END;
 

                GO
              CREATE PROCEDURE SP_GetsysdiagramsInfoByID
(
    @diagram_id int
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        select * FROM sysdiagrams WHERE diagram_id = @diagram_id;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH;
END;


                GO
              
        CREATE PROCEDURE SP_IssysdiagramsExistsBydiagram_id
        (
            @diagram_id int
        )
        AS
        BEGIN
            SET NOCOUNT ON;
            BEGIN TRY
                IF EXISTS (SELECT 1 FROM sysdiagrams WHERE diagram_id = @diagram_id)
                BEGIN 
                    RETURN 1;
                END
                ELSE
                BEGIN
                    RETURN 0;
                END
            END TRY
            BEGIN CATCH
                DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
                SELECT 
                    @ErrorMessage = ERROR_MESSAGE(),
                    @ErrorSeverity = ERROR_SEVERITY(),
                    @ErrorState = ERROR_STATE();
                RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
            END CATCH;
        END;

                GO
              CREATE PROCEDURE SP_UpdatesysdiagramsByID
    @name nvarchar (100),
    @principal_id int,
    @diagram_id int,
    @version int,
    @definition varbinary  AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
    UPDATE sysdiagrams
    SET
        name = @name,
        principal_id = @principal_id,
        version = @version,
        definition = @definition    WHERE diagram_id = @diagram_id;
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_STATE() AS ErrorState,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH;
END;

                        
     }
 
 